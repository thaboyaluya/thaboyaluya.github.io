!function(t, e) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define(e) : t.Rainbow = e()
  }(this, function() {
      "use strict";
      function t() {
          return "undefined" != typeof module && "object" == typeof module.exports
      }
      function e(t) {
          var e = t.getAttribute("data-language") || t.parentNode.getAttribute("data-language");
          if (!e) {
              var n = /\blang(?:uage)?-(\w+)/
                , a = t.className.match(n) || t.parentNode.className.match(n);
              a && (e = a[1])
          }
          return e ? e.toLowerCase() : null
      }
      function n(t, e, n, a) {
          return (n !== t || a !== e) && n <= t && a >= e
      }
      function a(t) {
          return t.replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/&(?![\w\#]+;)/g, "&amp;")
      }
      function r(t, e) {
          for (var n = 0, a = 1; a < e; ++a)
              t[a] && (n += t[a].length);
          return n
      }
      function s(t, e, n, a) {
          return n >= t && n < e || a > t && a < e
      }
      function o(t) {
          var e = [];
          for (var n in t)
              t.hasOwnProperty(n) && e.push(n);
          return e.sort(function(t, e) {
              return e - t
          })
      }
      function i(t, e, n, a) {
          var r = a.substr(t);
          return a.substr(0, t) + r.replace(e, n)
      }
      function p(t) {
          function e() {
              self.postMessage({
                  id: n.id,
                  lang: n.lang,
                  result: a
              })
          }
          var n = t.data
            , a = new v(n.options).refract(n.code, n.lang);
          return n.isNode ? (e(),
          void self.close()) : void setTimeout(function() {
              e()
          }, 1e3 * n.options.delay)
      }
      function c(e, c) {
          function g(t) {
              t.data.id === e.id && (c(t.data),
              l.removeEventListener("message", g))
          }
          var l = ((k || null === L) && (L = function e(p, c) {
              if (t())
                  return global.Worker = require("webworker-threads").Worker,
                  new Worker(__filename);
              var g = c.toString()
                , l = o.toString();
              l += a.toString(),
              l += n.toString(),
              l += s.toString(),
              l += i.toString(),
              l += r.toString();
              var u = (l += g) + "	this.onmessage=" + p.toString()
                , m = new Blob([u],{
                  type: "text/javascript"
              });
              return new Worker((window.URL || window.webkitURL).createObjectURL(m))
          }(p, v)),
          L);
          l.addEventListener("message", g),
          l.postMessage(e)
      }
      function g(t, e, n) {
          return function(a) {
              t.innerHTML = a.result,
              t.classList.remove("loading"),
              t.classList.add("rainbow-show"),
              "PRE" === t.parentNode.tagName && (t.parentNode.classList.remove("loading"),
              t.parentNode.classList.add("rainbow-show")),
              h && h(t, a.lang),
              0 == --e.c && n()
          }
      }
      function l(t, e) {
          var n, a = {};
          return "object" == typeof e && (e = (a = e).language),
          e = w[e] || e,
          {
              id: $++,
              code: t,
              lang: e,
              options: {
                  patterns: y,
                  inheritenceMap: b,
                  aliases: w,
                  globalClass: (n = a).globalClass,
                  delay: isNaN(n.delay) ? 0 : n.delay
              },
              isNode: k
          }
      }
      function u(t) {
          var e = document.createElement("div");
          e.className = "preloader";
          for (var n = 0; n < 7; n++)
              e.appendChild(document.createElement("div"));
          t.appendChild(e)
      }
      function m(t, n) {
          n = n || function() {}
          ,
          t = t && "function" == typeof t.getElementsByTagName ? t : document;
          for (var a = t.getElementsByTagName("pre"), r = t.getElementsByTagName("code"), s = [], o = [], i = 0, p = a; i < p.length; i += 1) {
              var m = p[i];
              u(m),
              m.getElementsByTagName("code").length ? m.getAttribute("data-trimmed") || (m.setAttribute("data-trimmed", !0),
              m.innerHTML = m.innerHTML.trim()) : s.push(m)
          }
          for (var d = 0, f = r; d < f.length; d += 1) {
              var h = f[d];
              o.push(h)
          }
          !function t(n, a) {
              for (var r = {
                  c: 0
              }, s = 0, o = n; s < o.length; s += 1) {
                  var i = o[s]
                    , p = e(i);
                  if (!i.classList.contains("rainbow") && p) {
                      i.classList.add("loading"),
                      i.classList.add("rainbow"),
                      "PRE" === i.parentNode.tagName && i.parentNode.classList.add("loading");
                      var u = i.getAttribute("data-global-class")
                        , m = parseInt(i.getAttribute("data-delay"), 10);
                      ++r.c,
                      c(l(i.innerHTML, {
                          language: p,
                          globalClass: u,
                          delay: m
                      }), g(i, r, a))
                  }
              }
              0 === r.c && a()
          }(o.concat(s), n)
      }
      function d(t) {
          h = t
      }
      function f(t, e) {
          w[t] = e
      }
      var h, v = function t(e) {
          function p(t, n) {
              var a = t.replace(/\./g, " ")
                , r = e.globalClass;
              return r && (a += " " + r),
              '<span class="' + a + '">' + n + "</span>"
          }
          function c(a, c, m) {
              function d(n) {
                  var s = w[n];
                  if (s) {
                      var o = a.matches[n]
                        , c = o.language
                        , l = o.name && o.matches ? o.matches : o
                        , u = function(t, e, a) {
                          _ = i(r(w, n), t, a ? p(a, e) : e, _)
                      };
                      if ("string" == typeof o)
                          return void u(s, s, o);
                      var m, d = new t(e);
                      if (c)
                          return m = d.refract(s, c),
                          void u(s, m);
                      m = d.refract(s, g, l.length ? l : [l]),
                      u(s, m, o.matches ? o.name : 0)
                  }
              }
              void 0 === m && (m = 0);
              var f, h = a.pattern;
              if (!h)
                  return !1;
              var v, y, b = !h.global, w = (h = (v = h,
              y = "",
              v.ignoreCase && (y += "i"),
              v.multiline && (y += "m"),
              RegExp(v.source, y))).exec(c);
              if (!w)
                  return !1;
              !a.name && a.matches && "string" == typeof a.matches[0] && (a.name = a.matches[0],
              delete a.matches[0]);
              var _ = w[0]
                , $ = w.index + m
                , k = w[0].length + $;
              if ($ === k)
                  return !1;
              if (function t(e, a) {
                  for (var r in u)
                      if (r = parseInt(r, 10),
                      n(r, u[r], e, a) && (delete u[r],
                      delete l[r]),
                      s(r, u[r], e, a))
                          return !0;
                  return !1
              }($, k))
                  return {
                      remaining: c.substr(k - m),
                      offset: k
                  };
              for (var x = o(a.matches), L = 0, N = x; L < N.length; L += 1)
                  d(N[L]);
              return f = _,
              a.name && (f = p(a.name, f)),
              l[$] = {
                  replace: w[0],
                  with: f
              },
              u[$] = k,
              !b && {
                  remaining: c.substr(k - m),
                  offset: k
              }
          }
          var g, l = {}, u = {};
          this.refract = function t(n, r, s) {
              return g = r,
              s = s || function t(n) {
                  for (var a = e.patterns[n] || []; e.inheritenceMap[n]; )
                      n = e.inheritenceMap[n],
                      a = a.concat(e.patterns[n] || []);
                  return a
              }(r),
              function t(e, n) {
                  for (var a = 0, r = n; a < r.length; a += 1)
                      for (var s = r[a], p = c(s, e); p; )
                          p = c(s, p.remaining, p.offset);
                  return function t(e) {
                      for (var n = o(l), a = 0, r = n; a < r.length; a += 1) {
                          var s = r[a]
                            , p = l[s];
                          e = i(s, p.replace, p.with, e)
                      }
                      return e
                  }(e)
              }(a(n), s)
          }
      }, y = {}, b = {}, w = {}, _ = {}, $ = 0, k = t(), x = "undefined" == typeof document && "undefined" != typeof self, L = null;
      return _ = {
          extend: function t(e, n, a) {
              b[e] || (b[e] = a),
              y[e] = n.concat(y[e] || [])
          },
          remove: function t(e) {
              delete b[e],
              delete y[e]
          },
          onHighlight: d,
          addAlias: f,
          color: function t() {
              for (var e, n = [], a = arguments.length; a--; )
                  n[a] = arguments[a];
              return "string" == typeof n[0] ? void c(l(n[0], n[1]), (e = n[2],
              function(t) {
                  e && e(t.result, t.lang)
              }
              )) : "function" == typeof n[0] ? void m(0, n[0]) : void m(n[0], n[1])
          }
      },
      k && (_.colorSync = function(t, e) {
          var n = l(t, e);
          return new v(n.options).refract(n.code, n.lang)
      }
      ),
      k || x || document.addEventListener("DOMContentLoaded", function(t) {
          _.defer || _.color(t)
      }, !1),
      x && (self.onmessage = p),
      _
  }),
  Rainbow.extend("css", [{
      name: "comment",
      pattern: /\/\*[\s\S]*?\*\//gm
  }, {
      name: "constant.hex-color",
      pattern: /#([a-f0-9]{3}|[a-f0-9]{6})(?=;|\s|,|\))/gi
  }, {
      matches: {
          1: "constant.numeric",
          2: "keyword.unit"
      },
      pattern: /(\d+)(px|em|cm|s|%)?/g
  }, {
      name: "string",
      pattern: /('|")(.*?)\1/g
  }, {
      name: "support.css-property",
      matches: {
          1: "support.vendor-prefix"
      },
      pattern: /(-o-|-moz-|-webkit-|-ms-)?[\w-]+(?=\s?:)(?!.*\{)/g
  }, {
      matches: {
          1: [{
              name: "entity.name.sass",
              pattern: /&amp;/g
          }, {
              name: "direct-descendant",
              pattern: /&gt;/g
          }, {
              name: "entity.name.class",
              pattern: /\.[\w\-_]+/g
          }, {
              name: "entity.name.id",
              pattern: /\#[\w\-_]+/g
          }, {
              name: "entity.name.pseudo",
              pattern: /:[\w\-_]+/g
          }, {
              name: "entity.name.tag-token",
              pattern: /\w+/g
          }]
      },
      pattern: /([\w\ ,\n:\.\#\&\;\-_]+)(?=.*\{)/g
  }, {
      matches: {
          2: "support.vendor-prefix",
          3: "support.css-value"
      },
      pattern: /(:|,)\s*(-o-|-moz-|-webkit-|-ms-)?([a-zA-Z-]*)(?=\b)(?!.*\{)/g
  }]),
  Rainbow.addAlias("scss", "css"),
  Rainbow.extend("generic", [{
      matches: {
          1: [{
              name: "keyword.operator",
              pattern: /\=|\+/g
          }, {
              name: "keyword.dot",
              pattern: /\./g
          }],
          2: {
              name: "string",
              matches: {
                  name: "constant.character.escape",
                  pattern: /\\('|"){1}/g
              }
          }
      },
      pattern: /(\(|\s|\[|\=|:|\+|\.|\{|,)(('|")([^\\\1]|\\.)*?(\3))/gm
  }, {
      name: "comment",
      pattern: /\/\*[\s\S]*?\*\/|(\/\/|\#)(?!.*('|").*?[^:](\/\/|\#)).*?$/gm
  }, {
      name: "constant.numeric",
      pattern: /\b(\d+(\.\d+)?(e(\+|\-)?\d+)?(f|d)?|0x[\da-f]+)\b/gi
  }, {
      matches: {
          1: "keyword"
      },
      pattern: /\b(and|array|as|b(ool(ean)?|reak)|c(ase|atch|har|lass|on(st|tinue))|d(ef|elete|o(uble)?)|e(cho|lse(if)?|xit|xtends|xcept)|f(inally|loat|or(each)?|unction)|global|if|import|int(eger)?|long|new|object|or|pr(int|ivate|otected)|public|return|self|st(ring|ruct|atic)|switch|th(en|is|row)|try|(un)?signed|var|void|while)(?=\b)/gi
  }, {
      name: "constant.language",
      pattern: /true|false|null/g
  }, {
      name: "keyword.operator",
      pattern: /\+|\!|\-|&(gt|lt|amp);|\||\*|\=/g
  }, {
      matches: {
          1: "function.call"
      },
      pattern: /(\w+?)(?=\()/g
  }, {
      matches: {
          1: "storage.function",
          2: "entity.name.function"
      },
      pattern: /(function)\s(.*?)(?=\()/g
  }]),
  Rainbow.extend("html", [{
      name: "source.php.embedded",
      matches: {
          1: "variable.language.php-tag",
          2: {
              language: "php"
          },
          3: "variable.language.php-tag"
      },
      pattern: /(&lt;\?php|&lt;\?=?(?!xml))([\s\S]*?)(\?&gt;)/gm
  }, {
      name: "source.css.embedded",
      matches: {
          1: {
              matches: {
                  1: "support.tag-token.style",
                  2: [{
                      name: "entity.tag-token.style",
                      pattern: /^style/g
                  }, {
                      name: "string",
                      pattern: /('|")(.*?)(\1)/g
                  }, {
                      name: "entity.tag-token.style.attribute",
                      pattern: /(\w+)/g
                  }],
                  3: "support.tag-token.style"
              },
              pattern: /(&lt;\/?)(style.*?)(&gt;)/g
          },
          2: {
              language: "css"
          },
          3: "support.tag-token.style",
          4: "entity.tag-token.style",
          5: "support.tag-token.style"
      },
      pattern: /(&lt;style.*?&gt;)([\s\S]*?)(&lt;\/)(style)(&gt;)/gm
  }, {
      name: "source.js.embedded",
      matches: {
          1: {
              matches: {
                  1: "support.tag-token.script",
                  2: [{
                      name: "entity.tag-token.script",
                      pattern: /^script/g
                  }, {
                      name: "string",
                      pattern: /('|")(.*?)(\1)/g
                  }, {
                      name: "entity.tag-token.script.attribute",
                      pattern: /(\w+)/g
                  }],
                  3: "support.tag-token.script"
              },
              pattern: /(&lt;\/?)(script.*?)(&gt;)/g
          },
          2: {
              language: "javascript"
          },
          3: "support.tag-token.script",
          4: "entity.tag-token.script",
          5: "support.tag-token.script"
      },
      pattern: /(&lt;script(?! src).*?&gt;)([\s\S]*?)(&lt;\/)(script)(&gt;)/gm
  }, {
      name: "comment.html",
      pattern: /&lt;\!--[\S\s]*?--&gt;/g
  }, {
      matches: {
          1: "support.tag-token.open",
          2: "support.tag-token.close"
      },
      pattern: /(&lt;)|(\/?\??&gt;)/g
  }, {
      name: "support.tag-token",
      matches: {
          1: "support.tag-token",
          2: "support.tag-token.special",
          3: "support.tag-token-name"
      },
      pattern: /(&lt;\??)(\/|\!?)(\w+)/g
  }, {
      matches: {
          1: "support.attribute"
      },
      pattern: /([a-z-]+)(?=\=)/gi
  }, {
      matches: {
          1: "support.operator",
          2: "string.quote",
          3: "string.value",
          4: "string.quote"
      },
      pattern: /(=)('|")(.*?)(\2)/g
  }, {
      matches: {
          1: "support.operator",
          2: "support.value"
      },
      pattern: /(=)([a-zA-Z\-0-9]*)\b/g
  }, {
      matches: {
          1: "support.attribute"
      },
      pattern: /\s([\w-]+)(?=\s|&gt;)(?![\s\S]*&lt;)/g
  }]),
  Rainbow.addAlias("xml", "html"),
  Rainbow.extend("javascript", [{
      name: "selector",
      pattern: /\$(?=\.|\()/g
  }, {
      name: "support",
      pattern: /\b(window|document)\b/g
  }, {
      name: "keyword",
      pattern: /\b(export|default|from)\b/g
  }, {
      name: "function.call",
      pattern: /\b(then)(?=\()/g
  }, {
      name: "variable.language.this",
      pattern: /\bthis\b/g
  }, {
      name: "variable.language.super",
      pattern: /super(?=\.|\()/g
  }, {
      name: "storage.type",
      pattern: /\b(const|let|var)(?=\s)/g
  }, {
      matches: {
          1: "support.property"
      },
      pattern: /\.(length|node(Name|Value))\b/g
  }, {
      matches: {
          1: "support.function"
      },
      pattern: /(setTimeout|setInterval)(?=\()/g
  }, {
      matches: {
          1: "support.method"
      },
      pattern: /\.(getAttribute|replace|push|getElementById|getElementsByClassName|setTimeout|setInterval)(?=\()/g
  }, {
      name: "string.regexp",
      matches: {
          1: "string.regexp.open",
          2: {
              name: "constant.regexp.escape",
              pattern: /\\(.){1}/g
          },
          3: "string.regexp.close",
          4: "string.regexp.modifier"
      },
      pattern: /(\/)((?![*+?])(?:[^\r\n\[\/\\]|\\.|\[(?:[^\r\n\]\\]|\\.)*\])+)(\/)(?!\/)([igm]{0,3})/g
  }, {
      matches: {
          1: "storage.type",
          3: "entity.function"
      },
      pattern: /(var)?(\s|^)(\S+)(?=\s?=\s?function\()/g
  }, {
      matches: {
          1: "keyword",
          2: "variable.type"
      },
      pattern: /(new)\s+(?!Promise)([^\(]*)(?=\()/g
  }, {
      name: "entity.function",
      pattern: /(\w+)(?=:\s{0,}function)/g
  }, {
      name: "constant.other",
      pattern: /\*(?= as)/g
  }, {
      matches: {
          1: "keyword",
          2: "constant.other"
      },
      pattern: /(export)\s+(\*)/g
  }, {
      matches: {
          1: "storage.type.accessor",
          2: "entity.name.function"
      },
      pattern: /(get|set)\s+(\w+)(?=\()/g
  }, {
      matches: {
          2: "entity.name.function"
      },
      pattern: /(^\s*)(\w+)(?=\([^\)]*?\)\s*\{)/gm
  }, {
      matches: {
          1: "storage.type.class",
          2: "entity.name.class",
          3: "storage.modifier.extends",
          4: "entity.other.inherited-class"
      },
      pattern: /(class)\s+(\w+)(?:\s+(extends)\s+(\w+))?(?=\s*\{)/g
  }, {
      name: "storage.type.function.arrow",
      pattern: /=&gt;/g
  }, {
      name: "support.class.promise",
      pattern: /\bPromise(?=(\(|\.))/g
  }], "generic"),
  Rainbow.addAlias("js", "javascript");
  